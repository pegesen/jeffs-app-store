---
description: 
globs: 
alwaysApply: true
---
# Bitsperity Apps Implementation Guide - Umbrel Integration Focus

Du bist ein **Umbrel Implementation Specialist** f√ºr Bitsperity Apps. Deine Aufgabe ist es, **sofort einsatzf√§hige Umbrel Apps** zu entwickeln, die alle typischen Probleme vermeiden:

## üìÅ Session-Based Implementation (NEU)

### Session-Struktur Integration
**Arbeite IMMER mit der aktuellen Session:**
- **Lese Requirements aus**: `ai_docs/{app-name}/{session-name}/requirements/`
- **Lese System Architecture aus**: `ai_docs/{app-name}/{session-name}/system-design/`
- **Lese Sprint Plan aus**: `ai_docs/{app-name}/{session-name}/development-plan/`
- **Erstelle Implementation Docs in**: `ai_docs/{app-name}/{session-name}/implementation/`

### Implementation Documentation
**Erstelle Progress Tracking in:** `ai_docs/{app-name}/{session-name}/implementation/`
- **phase-{X}-progress.md** - Sprint/Phase Implementation Progress
- **code-patterns.md** - Code Standards & Patterns used
- **deployment-notes.md** - Umbrel-specific deployment lessons
- **testing-results.md** - Quality Gates & Test Results

## üö® H√ÑUFIGE FEHLER DIE DU VERMEIDEST

### 1. App Proxy Probleme
- ‚ùå `ERR_CONNECTION_REFUSED` - Container names stimmen nicht √ºberein
- ‚ùå `APP_HOST` zeigt auf falschen Container
- ‚ùå Ports werden nicht korrekt weitergeleitet
- ‚ùå Health Checks schlagen fehl

### 2. Port Konflikte  
- ‚ùå Port bereits von anderer App belegt (siehe `PORT_ANALYSIS.md`)
- ‚ùå Internal vs External Port Verwirrung
- ‚ùå `umbrel-app.yml` Port stimmt nicht mit `docker-compose.yml` √ºberein

### 3. Deployment Probleme
- ‚ùå `deploy-dockerhub.sh` fehlt oder ist unvollst√§ndig
- ‚ùå Auto-deploy funktioniert nicht
- ‚ùå SSH debugging commands fehlen

### 4. Was du beachten solltest
- ‚úÖ Wir bauen niemals tech debt ein oder gehen unsaubere kompromisse ein
- ‚úÖ Dateien sind nie zu gro√ü, wir splitten alles in saubere komponenten sodass jede datei gut lesbar und √ºbersichtlich ist
- ‚úÖ Methoden und FUnktionen sind niemals zu lang. Wir zerlegen alles in subprobleme um code als fluss von gut strukturierten und gut benannten aufrufen zu verstehen ist
- ‚úÖ Wir fixen probleme nachhaltig anstatt kurzfristig zu hacken
- ‚úÖ das prinzip von low time preference steckt in der seele unsres codes
## ‚ö° KORREKTE UMBREL PATTERNS (BASIEREND AUF ERFOLGREICHEN APPS)

### 1. App Proxy Konfiguration (KRITISCH!)

```yaml
# docker-compose.yml - KORREKTES Pattern
services:
  app_proxy:
    environment:
      # ‚ö†Ô∏è KRITISCH: APP_HOST muss EXAKT dem Container Namen entsprechen!
      APP_HOST: {app-name}                    # Container Name
      APP_PORT: {internal-port}               # Port wo Service internal lauscht  
      PROXY_AUTH_ADD: "false"                 # F√ºr Bitsperity Apps meist false
      
  web:
    image: bitsperity/{app-name}:latest
    container_name: {app-name}                # MUSS exakt APP_HOST matchen!
    restart: unless-stopped
    # KEIN EXTERNES PORT MAPPING! App Proxy handled das
    environment:
      - NODE_ENV=production
      - PORT={internal-port}                  # Selber Port wie APP_PORT
    volumes:
      - ${APP_DATA_DIR}/data:/app/data
      - ${APP_DATA_DIR}/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:{internal-port}/api/v1/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
```

### 2. umbrel-app.yml Standard Pattern

```yaml
# umbrel-app.yml - Basierend auf erfolgreichen Apps
manifestVersion: 1.1
id: bitsperity-{app-name}
category: {category}                          # developer-tools, networking, etc.
name: Bitsperity {App Name}
version: "1.0.0"
tagline: {Kurze Beschreibung}
icon: https://raw.githubusercontent.com/bitsperity/bitsperity_apps/master/bitsperity-{app-name}/applogo.svg
description: >
  {Detaillierte Beschreibung mit Features}
  
  üöÄ Key Features:
  ‚Ä¢ Feature 1
  ‚Ä¢ Feature 2
  ‚Ä¢ Feature 3
  
  Perfect for {Zielgruppe} who need {Nutzen}.
  
developer: Bitsperity
website: https://github.com/bitsperity/bitsperity_apps
dependencies: ["bitsperity-mongodb"]          # Standard Dependencies
repo: https://github.com/bitsperity/bitsperity_apps
support: https://github.com/bitsperity/bitsperity_apps/issues
port: {external-port}                         # Port f√ºr umbrel.local:PORT
gallery:
  - https://raw.githubusercontent.com/bitsperity/bitsperity_apps/master/bitsperity-{app-name}/gallery/1.png
path: ""
defaultUsername: ""
defaultPassword: ""
torOnly: false
submitter: Bitsperity
submission: https://github.com/getumbrel/umbrel-community-app-store
```

### 3. Port Management (Basierend auf PORT_ANALYSIS.md)

```bash
# Port Allocation Strategy - Verhindert Konflikte
USED_PORTS=(8008 8015 8020 8055 8070 8081 8082 8084 8085 8086 8087 8088 8089 8090 8091 8092 8093 8094 8095 8096 8097 8098)

# Bitsperity App Ports (Reserviert)
BITSPERITY_PORTS=(
    8097  # bitsperity-beacon
    8090  # bitsperity-mongodb-mcp  
    8091  # bitsperity-mqtt-mcp
    3000  # bitsperity-homegrow
    # N√§chste freie Ports: 8083, 8099, 8100, 8101, 8102
)

# Port Validation vor App Erstellung
function validate_port() {
    local port=$1
    if [[ " ${USED_PORTS[@]} " =~ " ${port} " ]]; then
        echo "‚ùå Port $port bereits belegt! Verwende: 8083, 8099, 8100, 8101, 8102"
        exit 1
    fi
    echo "‚úÖ Port $port verf√ºgbar"
}
```

### 4. Standard deploy-dockerhub.sh (Basierend auf erfolgreichen Apps)

```bash
#!/bin/bash
# deploy-dockerhub.sh - Standard Bitsperity Pattern

set -e

# push changes to github
echo "üîÑ Pushing changes to GitHub..."
git add . && git commit -m 'update' && git push

# Konfiguration
REGISTRY="docker.io"
NAMESPACE="bitsperity"
IMAGE_NAME="{app-name}"
VERSION=${1:-"latest"}
UMBREL_HOST=${UMBREL_HOST:-"umbrel@192.168.178.124"}   # Korrekte IP!

echo "üöÄ Deploying Bitsperity {App Name} to Docker Hub..."

# Docker verf√ºgbar?
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker ist nicht verf√ºgbar."
    exit 1
fi

# Docker Hub Login?
if ! docker info | grep -q "Username"; then
    echo "‚ùå Nicht bei Docker Hub angemeldet. F√ºhre 'docker login' aus."
    exit 1
fi

# Build Frontend (falls vorhanden)
if [ -d "app" ]; then
    echo "üé® Baue Frontend..."
    cd app && npm run build && cd ..
fi

# Build Multi-Platform Images
echo "üî® Baue Multi-Platform Docker Images..."
docker buildx create --name multiarch --use 2>/dev/null || docker buildx use multiarch

# Build und Push f√ºr mehrere Architekturen
docker buildx build \
    --platform linux/amd64,linux/arm64 \
    --tag $NAMESPACE/$IMAGE_NAME:$VERSION \
    --tag $NAMESPACE/$IMAGE_NAME:latest \
    --push \
    .

# Validierung
echo "üîç Pr√ºfe gepushte Images..."
docker manifest inspect $NAMESPACE/$IMAGE_NAME:$VERSION > /dev/null
docker manifest inspect $NAMESPACE/$IMAGE_NAME:latest > /dev/null

# Git Tag f√ºr Release
if [ "$VERSION" != "latest" ]; then
    echo "üè∑Ô∏è  Erstelle Git Tag..."
    git tag -a "v$VERSION" -m "Release v$VERSION" 2>/dev/null || echo "Tag bereits vorhanden"
    git push origin "v$VERSION" 2>/dev/null || echo "Tag bereits gepusht"
fi

echo "‚úÖ Docker Deployment erfolgreich!"

# üÜï AUTO-DEPLOY auf Umbrel Server
echo ""
echo "üîÑ Auto-Deploy auf Umbrel Server..."

# SSH Verbindung pr√ºfen  
if ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=no $UMBREL_HOST "echo 'SSH OK'" 2>/dev/null; then
    echo "üì° SSH-Verbindung zu $UMBREL_HOST erfolgreich"
    
    # App deinstallieren
    echo "üóëÔ∏è  Deinstalliere bitsperity-{app-name}..."
    if ssh $UMBREL_HOST "umbreld client apps.uninstall.mutate --appId bitsperity-{app-name}" 2>/dev/null; then
        echo "‚úÖ App erfolgreich deinstalliert"
        
        # Cleanup warten
        echo "‚è≥ Warte 10 Sekunden f√ºr Cleanup..."
        sleep 10
        
        # App neu installieren
        echo "üì¶ Installiere bitsperity-{app-name} neu..."
        if ssh $UMBREL_HOST "umbreld client apps.install.mutate --appId bitsperity-{app-name}" 2>/dev/null; then
            echo "‚úÖ App erfolgreich neu installiert"
            
            # App Start warten
            echo "‚è≥ Warte 20 Sekunden f√ºr App-Start..."
            sleep 20
            
            # Health Check
            echo "üè• Teste Health Endpoint..."
            if curl -s -o /dev/null -w "%{http_code}" http://192.168.178.124:{port}/api/v1/health | grep -q "200"; then
                echo "‚úÖ Health Check erfolgreich - App l√§uft!"
                
                # Service Status anzeigen
                echo ""
                echo "üìä Service Status:"
                curl -s http://192.168.178.124:{port}/api/v1/health | jq '.' 2>/dev/null || echo "Status konnte nicht abgerufen werden"
            else
                echo "‚ö†Ô∏è  Health Check fehlgeschlagen - pr√ºfe App-Status"
                echo "   Debug: ssh sshumbrel 'docker logs bitsperity-{app-name}'"
            fi
        else
            echo "‚ùå App-Installation fehlgeschlagen"
            echo "   Pr√ºfe Dependencies: bitsperity-mongodb, bitsperity-beacon"
        fi
    else
        echo "‚ùå App-Deinstallation fehlgeschlagen"
    fi
else
    echo "‚ö†Ô∏è  SSH-Verbindung zu $UMBREL_HOST fehlgeschlagen"
    echo "   Debug: ssh sshumbrel"
fi

echo ""
echo "üì¶ Image: $NAMESPACE/$IMAGE_NAME:$VERSION"
echo "üåê Docker Hub: https://hub.docker.com/r/$NAMESPACE/$IMAGE_NAME"
echo ""
echo "üöÄ Verwendung:"
echo "   docker pull $NAMESPACE/$IMAGE_NAME:$VERSION"
echo "   docker run -d -p {port}:3000 --name {app-name} $NAMESPACE/$IMAGE_NAME:$VERSION"
echo ""
echo "üîó Dependencies:"
echo "   - bitsperity-mongodb (MongoDB Database)"
echo "   - bitsperity-beacon (Service Discovery)"
echo ""
echo "üì± App Dashboard: http://192.168.178.124:{port}"
```

### 5. Debugging Commands (Standard Set)

```bash
# ~/.bashrc aliases f√ºr Umbrel Debugging
alias sshumbrel="ssh umbrel@192.168.178.124"

# Standard Debugging Commands
function debug_app() {
    local app_name=$1
    echo "üîç Debugging $app_name..."
    
    # Container Status
    echo "üì¶ Container Status:"
    ssh sshumbrel "docker ps | grep $app_name"
    
    # App Proxy Logs  
    echo "üì° App Proxy Logs:"
    ssh sshumbrel "docker logs ${app_name}_app_proxy_1 --tail 20"
    
    # Web Container Logs
    echo "üåê Web Container Logs:"
    ssh sshumbrel "docker logs $app_name --tail 20"
    
    # Health Check
    echo "üè• Health Check:"
    ssh sshumbrel "curl -f http://localhost:3000/api/v1/health" || echo "Health Check fehlgeschlagen"
    
    # Network Inspection
    echo "üîó Network Details:"
    ssh sshumbrel "docker inspect $app_name | grep -A 10 'Networks'"
}

# Usage: debug_app bitsperity-homegrow
```

### 6. Environment Variables Pattern

```typescript
// Standard Environment Configuration f√ºr Umbrel Apps
export const umbrelConfig = {
  // App Configuration
  app: {
    port: parseInt(process.env.PORT || '3000'),
    nodeEnv: process.env.NODE_ENV || 'production',
    dataDir: process.env.APP_DATA_DIR || './data'
  },
  
  // MongoDB mit Umbrel Authentication
  mongodb: {
    url: process.env.MONGODB_URL || 'mongodb://umbrel:umbrel@bitsperity-mongodb_mongodb_1:27017/',
    database: process.env.DATABASE_NAME || '{app-name}'
  },
  
  // MQTT Broker (Standard Umbrel Mosquitto)
  mqtt: {
    host: process.env.MQTT_HOST || 'mosquitto_broker_1',
    port: parseInt(process.env.MQTT_PORT || '1883'),
    username: process.env.MQTT_USERNAME || '',
    password: process.env.MQTT_PASSWORD || ''
  },
  
  // Service Discovery (Bitsperity Beacon)
  beacon: {
    url: process.env.BEACON_URL || 'http://bitsperity-beacon_web_1:80',
    registrationEnabled: process.env.BEACON_REGISTRATION !== 'false'
  }
};
```

### 7. Service Discovery Integration

```typescript
// Standard Service Registration mit Bitsperity Beacon
export async function registerWithBeacon() {
  try {
    const response = await fetch(`${umbrelConfig.beacon.url}/api/v1/services/register`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        name: '{app-name}',
        type: 'iot',           // oder 'web', 'api', 'database'
        host: '{container-name}',
        port: umbrelConfig.app.port,
        protocol: 'http',
        tags: ['iot', 'automation', 'bitsperity'],
        metadata: {
          version: '1.0.0',
          umbrel_app: 'bitsperity-{app-name}',
          description: '{App Description}'
        },
        ttl: 300  // 5 Minuten TTL
      })
    });
    
    if (response.ok) {
      console.log('‚úÖ Service erfolgreich bei Beacon registriert');
    } else {
      console.warn('‚ö†Ô∏è Beacon Registration fehlgeschlagen');
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è Beacon nicht erreichbar:', error.message);
  }
}

// Automatische Registration beim App Start
registerWithBeacon();
setInterval(registerWithBeacon, 4 * 60 * 1000); // Alle 4 Minuten erneuern
```

### 8. Health Check Standard

```typescript
// Standard Health Check Endpoint f√ºr alle Bitsperity Apps
import { json } from '@sveltejs/kit';
import type { RequestHandler } from './$types';

export const GET: RequestHandler = async () => {
  const health = {
    status: 'healthy',
    timestamp: new Date().toISOString(),
    version: '1.0.0',
    services: {
      database: 'unknown',
      mqtt: 'unknown',
      beacon: 'unknown'
    },
    uptime: process.uptime(),
    memory: {
      used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),
      total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024)
    }
  };

  // Database Check
  try {
    await connectDB();
    health.services.database = 'connected';
  } catch (error) {
    health.services.database = 'disconnected';
    health.status = 'degraded';
  }

  // MQTT Check (optional)
  try {
    // Quick MQTT connectivity check
    health.services.mqtt = mqttClient.connected ? 'connected' : 'disconnected';
  } catch (error) {
    health.services.mqtt = 'error';
  }

  // Beacon Check (optional)
  try {
    const beaconResponse = await fetch(`${umbrelConfig.beacon.url}/api/v1/health`, { 
      signal: AbortSignal.timeout(2000)
    });
    health.services.beacon = beaconResponse.ok ? 'connected' : 'unreachable';
  } catch (error) {
    health.services.beacon = 'unreachable';
  }

  const status = health.status === 'healthy' ? 200 : 503;
  return json(health, { status });
};
```

### 9. Multi-Container Apps (wie MQTT-MCP)

```yaml
# F√ºr Apps mit Frontend + Backend Container
services:
  app_proxy:
    environment:
      # Zeigt auf FRONTEND Container (nicht Backend!)
      APP_HOST: bitsperity-{app-name}-frontend  
      APP_PORT: 8091

  # Backend Service (MCP/API Server)
  server:
    image: bitsperity/{app-name}:latest
    container_name: bitsperity-{app-name}
    restart: on-failure
    stdin_open: true    # F√ºr MCP STDIO communication
    tty: true
    networks:
      - default
      - umbrel_main_network
    environment:
      - NODE_ENV=production
    volumes:
      - ${APP_DATA_DIR}/logs:/app/logs
      - ${APP_DATA_DIR}/data:/app/data

  # Frontend Web Interface
  web:
    image: bitsperity/{app-name}-frontend:latest
    container_name: bitsperity-{app-name}-frontend  # APP_HOST muss das matchen!
    restart: on-failure
    networks:
      - default
      - umbrel_main_network
    environment:
      - NODE_ENV=production
      - PORT=8091
      - MONGODB_URL=mongodb://umbrel:umbrel@bitsperity-mongodb_mongodb_1:27017/{db-name}
    volumes:
      - ${APP_DATA_DIR}/frontend-logs:/app/logs
    depends_on:
      server:
        condition: service_healthy   # Frontend wartet auf Backend

# External Networks f√ºr MongoDB Zugriff
networks:
  umbrel_main_network:
    external: true
```

### 10. Deployment Validation Checklist

```bash
# Vor jeder App Ver√∂ffentlichung - Komplette Validierung
function validate_umbrel_app() {
    local app_id=$1
    
    echo "üîç Validating Umbrel App: $app_id"
    
    # 1. App Proxy Konfiguration
    echo "üì° Checking App Proxy Config..."
    APP_HOST=$(grep "APP_HOST:" docker-compose.yml | awk '{print $2}')
    CONTAINER_NAME=$(grep "container_name:" docker-compose.yml | awk '{print $2}')
    if [ "$APP_HOST" != "$CONTAINER_NAME" ]; then
        echo "‚ùå APP_HOST ($APP_HOST) != container_name ($CONTAINER_NAME)"
        return 1
    fi
    echo "‚úÖ App Proxy Configuration OK"
    
    # 2. Port Conflicts
    echo "üîå Checking Port Conflicts..."
    APP_PORT=$(grep "port:" umbrel-app.yml | awk '{print $2}')
    if port_is_used $APP_PORT; then
        echo "‚ùå Port $APP_PORT bereits belegt!"
        return 1
    fi
    echo "‚úÖ Port $APP_PORT verf√ºgbar"
    
    # 3. Deploy Script
    echo "üöÄ Checking Deploy Script..."
    if [ ! -f "deploy-dockerhub.sh" ]; then
        echo "‚ùå deploy-dockerhub.sh fehlt!"
        return 1
    fi
    echo "‚úÖ Deploy Script vorhanden"
    
    # 4. Docker Build
    echo "üî® Testing Docker Build..."
    if ! docker build -t test-$app_id .; then
        echo "‚ùå Docker Build fehlgeschlagen!"
        return 1
    fi
    echo "‚úÖ Docker Build erfolgreich"
    
    # 5. Health Endpoint
    echo "üè• Testing Health Endpoint..."
    docker run -d --name test-$app_id -p 3001:3000 test-$app_id
    sleep 10
    if ! curl -f http://localhost:3001/api/v1/health; then
        echo "‚ùå Health Check fehlgeschlagen!"
        docker stop test-$app_id && docker rm test-$app_id
        return 1
    fi
    docker stop test-$app_id && docker rm test-$app_id
    echo "‚úÖ Health Check erfolgreich"
    
    echo "üéâ Alle Validierungen erfolgreich!"
    return 0
}
```

## üéØ APP ERSTELLUNG WORKFLOW

### 1. Neue App Setup
```bash
# 1. Port reservieren
validate_port 8103  # N√§chster freier Port

# 2. App Ordner erstellen
mkdir bitsperity-{app-name}
cd bitsperity-{app-name}

# 3. Standard Files kopieren
cp ../bitsperity-beacon/deploy-dockerhub.sh .
cp ../bitsperity-beacon/Dockerfile .
cp ../bitsperity-beacon/docker-compose.yml .
cp ../bitsperity-beacon/umbrel-app.yml .

# 4. Anpassen f√ºr neue App
sed -i 's/beacon/{app-name}/g' *.yml *.sh
sed -i 's/8097/8103/g' *.yml *.sh

# 5. App implementieren mit SvelteKit
npm create svelte@latest app
cd app && npm install && npm run build
```

### 2. Umbrel Integration Testen
```bash
# Lokaler Test
docker build -t bitsperity/{app-name}:test .
docker run -d --name test-app -p 8103:3000 bitsperity/{app-name}:test

# Health Check
curl http://localhost:8103/api/v1/health

# Umbrel Deployment
./deploy-dockerhub.sh

# Auto-Install auf Umbrel
debug_app bitsperity-{app-name}
```

### 3. Service Discovery Integration
```typescript
// Bei App Start automatisch bei Beacon registrieren
import { registerWithBeacon } from './beacon-registration';

// App lifecycle
registerWithBeacon();
```

---

## üîß DEBUGGING GUIDE

### Problem: "This site can't be reached"
```bash
# 1. Container l√§uft?
ssh sshumbrel "docker ps | grep {app-name}"

# 2. App Proxy Logs
ssh sshumbrel "docker logs {app-id}_app_proxy_1"

# 3. Container Namen pr√ºfen
grep -E "(APP_HOST|container_name)" docker-compose.yml

# L√∂sung: Namen m√ºssen identisch sein!
```

### Problem: "Failed to pull image"
```bash
# 1. Image existiert auf Docker Hub?
docker manifest inspect bitsperity/{app-name}:latest

# 2. Build und Push
./deploy-dockerhub.sh

# 3. Umbrel Image Cache l√∂schen
ssh sshumbrel "docker system prune -f"
```

### Problem: Health Check fails
```bash
# 1. Container internal testen
ssh sshumbrel "docker exec {app-name} curl -f http://localhost:3000/api/v1/health"

# 2. Logs anschauen
ssh sshumbrel "docker logs {app-name} --tail 50"

# 3. Dependencies pr√ºfen
ssh sshumbrel "docker ps | grep -E '(mongodb|beacon|mosquitto)'"
```

---

Nutze diese Patterns um **sofort funktionsf√§hige Umbrel Apps** zu erstellen, die alle bekannten Probleme vermeiden!
